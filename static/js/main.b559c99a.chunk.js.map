{"version":3,"sources":["components/StartPage.js","components/RecordingPage.js","App.js","index.js"],"names":["startRecording","className","onClick","getRecordingTime","stopRecording","finished","id","autoPlay","muted","recordingConfig","App","state","recording","startTime","currentTime","chunks","stream","recorder","getCurrentTime","Math","floor","Date","now","a","navigator","mediaDevices","getDisplayMedia","video","audio","MediaRecorder","mimeType","find","config","isTypeSupported","start","ondataavailable","e","push","data","onstop","blob","Blob","loadDurationMetadata","URL","createObjectURL","duration","fixWebmDuration","fixedBlob","createDownloadButton","clearInterval","timer","getTracks","forEach","track","stop","setState","document","getElementById","srcObject","setInterval","url","Promise","resolve","videoElement","src","onloadedmetadata","Infinity","ontimeupdate","createElement","querySelector","appendChild","classList","add","href","download","innerText","max","this","RecordingPage","StartPage","Component","ReactDOM","render","StrictMode"],"mappings":"8QAEe,kBAAEA,EAAF,EAAEA,eAAF,OACX,yBAAKC,UAAW,OACZ,yBAAKA,UAAW,SAAUC,QAAS,kBAAMF,MAAzC,qBCFO,kBAAEG,EAAF,EAAEA,iBAAkBC,EAApB,EAAoBA,cAAeC,EAAnC,EAAmCA,SAAnC,OACX,yBAAKJ,UAAW,OACZ,2BAAOK,GAAI,QAASC,UAAU,EAAMC,OAAO,IAC1CH,EACG,gEAAsCF,IAAtC,KACA,6CAAmBA,IAAnB,KAEJ,yBAAKF,UAAW,YACVI,GAAY,yBAAKJ,UAAW,SAAUC,QAAS,kBAAME,MAAzC,qB,gBCLpBK,EAAkB,CACpB,iCACA,iCACA,cAGiBC,E,4MACjBC,MAAQ,CACJC,WAAW,EACXP,UAAU,EACVQ,UAAW,EACXC,YAAa,G,EAGjBC,OAAS,G,EACTC,OAAS,K,EACTC,SAAW,K,EAEXC,eAAiB,kBAAMC,KAAKC,MAAMC,KAAKC,MAAQ,M,EAE/CtB,e,sBAAiB,sBAAAuB,EAAA,sEACOC,UAAUC,aAAaC,gBAAgB,CAACC,OAAO,EAAMC,OAAO,IADnE,OACb,EAAKZ,OADQ,OAGb,EAAKC,SAAW,IAAIY,cAAc,EAAKb,OAAQ,CAACc,SAAUrB,EAAgBsB,MAAK,SAAAC,GAAM,OAAIH,cAAcI,gBAAgBD,QACvH,EAAKf,SAASiB,QAEd,EAAKjB,SAASkB,gBAAkB,SAAAC,GAAC,OAAI,EAAKrB,OAAOsB,KAAKD,EAAEE,OAExD,EAAKrB,SAASsB,OAAd,sBAAuB,8BAAAhB,EAAA,6DACbiB,EAAO,IAAIC,KAAK,EAAK1B,QADR,SAGI,EAAK2B,qBAAqBC,IAAIC,gBAAgBJ,IAHlD,mBAGbK,EAAwE,IAH3D,KAKnBC,IAAgBN,EAAMK,GAAU,SAAAE,GAAS,OACrC,EAAKC,qBAAqBL,IAAIC,gBAAgBG,OAGlDE,cAAc,EAAKC,OAEC,OAAhB,EAAKlC,SACL,EAAKA,OAAOmC,YAAYC,SAAQ,SAAAC,GAAK,OAAIA,EAAMC,UAC/C,EAAKtC,OAAS,MAGlB,EAAKuC,SAAS,CAAC3C,WAAW,EAAOP,UAAU,IAhBxB,2CAmBvB,EAAKkD,SAAS,CAAC3C,WAAW,EAAMC,UAAW,EAAKK,mBAEhDsC,SAASC,eAAe,SAASC,UAAY,EAAK1C,OAElD,EAAKkC,MAAQS,aAAY,kBAAM,EAAKJ,SAAS,CAACzC,YAAa,EAAKI,qBAAoB,KA/BvE,4C,EAkCjBwB,qB,uCAAuB,WAAMkB,GAAN,SAAArC,EAAA,+EAAa,IAAIsC,SAAQ,SAAAC,GAC5C,IAAMC,EAAeP,SAASC,eAAe,SAC7CM,EAAaL,UAAY,KACzBK,EAAaC,IAAMJ,EAEnBG,EAAaE,iBAAmB,WACxBF,EAAalB,WAAaqB,MAE9BH,EAAajD,YAAc,MAC3BiD,EAAaI,aAAe,WACxBL,EAAQC,EAAalB,UAErBkB,EAAajD,YAAc,EAC3BiD,EAAaC,IAAM,YAbR,2C,wDAkBvBhB,qBAAuB,SAAAY,GACnB,IAAMrC,EAAIiC,SAASY,cAAc,KACjCZ,SAASa,cAAc,YAAYC,YAAY/C,GAC/CA,EAAEgD,UAAUC,IAAI,UAChBjD,EAAEkD,KAAOb,EACTrC,EAAEmD,SAAW,aACbnD,EAAEoD,UAAY,kB,EAGlBvE,c,sBAAgB,sBAAAmB,EAAA,+EAAY,EAAKN,SAASqC,QAA1B,2C,EAEhBnD,iBAAmB,kBAAMgB,KAAKyD,IAAI,EAAG,EAAKjE,MAAMG,YAAc,EAAKH,MAAME,Y,uDAE/D,IAAD,OACL,OAASgE,KAAKlE,MAAMC,WAAciE,KAAKlE,MAAMN,SAEzC,kBAACyE,EAAD,CAAezE,SAAUwE,KAAKlE,MAAMN,SAAUF,iBAAkB,kBAAM,EAAKA,oBAAoBC,cAAe,kBAAM,EAAKA,mBADzH,kBAAC2E,EAAD,CAAW/E,eAAgB,kBAAM,EAAKA,wB,GAjFjBgF,a,MCNjCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJ3B,SAASC,eAAe,W","file":"static/js/main.b559c99a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default ({startRecording}) => (\r\n    <div className={'app'}>\r\n        <div className={'button'} onClick={() => startRecording()}>Start Recording</div>\r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nexport default ({getRecordingTime, stopRecording, finished}) => (\r\n    <div className={'app'}>\r\n        <video id={'video'} autoPlay={true} muted={true}/>\r\n        {finished ?\r\n            <div>RECORDING ENDED: Clip duration: {getRecordingTime()}s</div> :\r\n            <div>RECORDING... {getRecordingTime()}s</div>}\r\n\r\n        <div className={'buttons'}>\r\n            {!finished && <div className={'button'} onClick={() => stopRecording()}>Stop Recording</div>}\r\n        </div>\r\n    </div>\r\n);\r\n\r\n","import React, {Component} from 'react';\nimport StartPage from './components/StartPage';\nimport RecordingPage from './components/RecordingPage';\nimport fixWebmDuration from 'fix-webm-duration';\n\nconst recordingConfig = [\n    'video/webm; codecs=\"vp9, opus\"',\n    'video/webm; codecs=\"vp8, opus\"',\n    'video/webm',\n];\n\nexport default class App extends Component {\n    state = {\n        recording: false,\n        finished: false,\n        startTime: 0,\n        currentTime: 0\n    }\n\n    chunks = [];\n    stream = null;\n    recorder = null;\n\n    getCurrentTime = () => Math.floor(Date.now() / 1000);\n\n    startRecording = async () => {\n        this.stream = await navigator.mediaDevices.getDisplayMedia({video: true, audio: true});\n\n        this.recorder = new MediaRecorder(this.stream, {mimeType: recordingConfig.find(config => MediaRecorder.isTypeSupported(config))});\n        this.recorder.start();\n\n        this.recorder.ondataavailable = e => this.chunks.push(e.data);\n\n        this.recorder.onstop = async () => {\n            const blob = new Blob(this.chunks);\n\n            const duration = await this.loadDurationMetadata(URL.createObjectURL(blob)) * 1000;\n\n            fixWebmDuration(blob, duration, fixedBlob =>\n                this.createDownloadButton(URL.createObjectURL(fixedBlob))\n            );\n\n            clearInterval(this.timer);\n\n            if (this.stream !== null) {\n                this.stream.getTracks().forEach(track => track.stop());\n                this.stream = null;\n            }\n\n            this.setState({recording: false, finished: true});\n        }\n\n        this.setState({recording: true, startTime: this.getCurrentTime()});\n\n        document.getElementById('video').srcObject = this.stream;\n\n        this.timer = setInterval(() => this.setState({currentTime: this.getCurrentTime()}), 1000);\n    }\n\n    loadDurationMetadata = async url => new Promise(resolve => {\n        const videoElement = document.getElementById('video');\n        videoElement.srcObject = null;\n        videoElement.src = url;\n\n        videoElement.onloadedmetadata = () => {\n            if (videoElement.duration !== Infinity) return;\n\n            videoElement.currentTime = 1e101;\n            videoElement.ontimeupdate = () => {\n                resolve(videoElement.duration);\n\n                videoElement.currentTime = 0;\n                videoElement.src = null;\n            }\n        }\n    });\n\n    createDownloadButton = url => {\n        const a = document.createElement('a');\n        document.querySelector('.buttons').appendChild(a);\n        a.classList.add('button');\n        a.href = url\n        a.download = 'video.webm';\n        a.innerText = 'Save Recording';\n    }\n\n    stopRecording = async () => this.recorder.stop();\n\n    getRecordingTime = () => Math.max(0, this.state.currentTime - this.state.startTime);\n\n    render() {\n        return (!this.state.recording && !this.state.finished) ?\n            <StartPage startRecording={() => this.startRecording()}/> :\n            <RecordingPage finished={this.state.finished} getRecordingTime={() => this.getRecordingTime()} stopRecording={() => this.stopRecording()}/>;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/style.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}