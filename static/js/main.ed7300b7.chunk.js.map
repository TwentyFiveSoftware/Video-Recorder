{"version":3,"sources":["App.js","index.js"],"names":["recordingConfig","App","state","recording","finished","startTime","currentTime","chunks","stream","recorder","getCurrentTime","Math","floor","Date","now","startRecording","a","displayMediaOptions","video","audio","navigator","mediaDevices","getDisplayMedia","MediaRecorder","mimeType","find","config","isTypeSupported","start","ondataavailable","e","push","data","onstop","blob","Blob","type","downloadBlob","setState","document","getElementById","srcObject","timer","setInterval","url","URL","createObjectURL","createElement","querySelector","appendChild","classList","add","href","download","innerText","stopRecording","clearInterval","stop","getTracks","forEach","track","getRecordingTime","max","this","className","id","autoPlay","muted","onClick","Component","ReactDOM","render","StrictMode"],"mappings":"0OAEMA,EAAkB,CACpB,iCACA,iCACA,cAGiBC,E,4MACjBC,MAAQ,CACJC,WAAW,EACXC,UAAU,EACVC,UAAW,EACXC,YAAa,G,EAGjBC,OAAS,G,EACTC,OAAS,K,EACTC,SAAW,K,EAEXC,eAAiB,kBAAMC,KAAKC,MAAMC,KAAKC,MAAQ,M,EAE/CC,e,sBAAiB,4BAAAC,EAAA,6DACPC,EAAsB,CACxBC,OAAO,EACPC,OAAO,GAHE,SAMOC,UAAUC,aAAaC,gBAAgBL,GAN9C,OAMb,EAAKT,OANQ,OAQb,EAAKC,SAAW,IAAIc,cAAc,EAAKf,OAAQ,CAACgB,SAAUxB,EAAgByB,MAAK,SAAAC,GAAM,OAAIH,cAAcI,gBAAgBD,QACvH,EAAKjB,SAASmB,QAEd,EAAKnB,SAASoB,gBAAkB,SAAAC,GAAC,OAAI,EAAKvB,OAAOwB,KAAKD,EAAEE,OAExD,EAAKvB,SAASwB,OAAS,SAAAH,GACnB,IAAMI,EAAO,IAAIC,KAAK,EAAK5B,OAAQ,CAAC6B,KAAMpC,IAC1C,EAAKqC,aAAaH,IAGtB,EAAKI,SAAS,CAACnC,WAAW,EAAME,UAAW,EAAKK,mBAEhD6B,SAASC,eAAe,SAASC,UAAY,EAAKjC,OAElD,EAAKkC,MAAQC,aAAY,kBAAM,EAAKL,SAAS,CAAChC,YAAa,EAAKI,qBAAoB,KAtBvE,4C,EAyBjB2B,aAAe,SAAAH,GACX,IAAMU,EAAMC,IAAIC,gBAAgBZ,GAC1BlB,EAAIuB,SAASQ,cAAc,KACjCR,SAASS,cAAc,YAAYC,YAAYjC,GAC/CA,EAAEkC,UAAUC,IAAI,UAChBnC,EAAEoC,KAAOR,EACT5B,EAAEqC,SAAW,aACbrC,EAAEsC,UAAY,kB,EAMlBC,c,sBAAgB,sBAAAvC,EAAA,yDACQ,OAAhB,EAAKR,OADG,iDAGZgD,cAAc,EAAKd,OAEnB,EAAKjC,SAASgD,OAEd,EAAKjD,OAAOkD,YAAYC,SAAQ,SAAAC,GAAK,OAAIA,EAAMH,UAC/C,EAAKjD,OAAS,KAEd+B,SAASC,eAAe,SAASC,UAAY,KAC7C,EAAKH,SAAS,CAACnC,WAAW,EAAOC,UAAU,IAX/B,2C,EAchByD,iBAAmB,kBAAMlD,KAAKmD,IAAI,EAAG,EAAK5D,MAAMI,YAAc,EAAKJ,MAAMG,Y,uDAE/D,IAAD,OACL,OAAK0D,KAAK7D,MAAMC,WAAc4D,KAAK7D,MAAME,SAUrC,yBAAK4D,UAAW,OACZ,2BAAOC,GAAI,QAASC,UAAU,EAAMC,OAAO,IAC1CJ,KAAK7D,MAAME,SACR,gEAAsC2D,KAAKF,mBAA3C,KACA,6CAAmBE,KAAKF,mBAAxB,KAEJ,yBAAKG,UAAW,YACVD,KAAK7D,MAAME,UAAY,yBAAK4D,UAAW,SAAUI,QAAS,kBAAM,EAAKb,kBAA9C,oBAf7B,yBAAKS,UAAW,OACZ,yBAAKA,UAAW,WACZ,yBAAKA,UAAW,SAAUI,QAAS,kBAAM,EAAKrD,mBAA9C,yB,GAzESsD,a,MCHjCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJjC,SAASC,eAAe,U","file":"static/js/main.ed7300b7.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nconst recordingConfig = [\n    'video/webm; codecs=\"vp9, opus\"',\n    'video/webm; codecs=\"vp8, opus\"',\n    'video/webm',\n];\n\nexport default class App extends Component {\n    state = {\n        recording: false,\n        finished: false,\n        startTime: 0,\n        currentTime: 0\n    }\n\n    chunks = [];\n    stream = null;\n    recorder = null;\n\n    getCurrentTime = () => Math.floor(Date.now() / 1000);\n\n    startRecording = async () => {\n        const displayMediaOptions = {\n            video: true,\n            audio: true\n        }\n\n        this.stream = await navigator.mediaDevices.getDisplayMedia(displayMediaOptions);\n\n        this.recorder = new MediaRecorder(this.stream, {mimeType: recordingConfig.find(config => MediaRecorder.isTypeSupported(config))});\n        this.recorder.start();\n\n        this.recorder.ondataavailable = e => this.chunks.push(e.data);\n\n        this.recorder.onstop = e => {\n            const blob = new Blob(this.chunks, {type: recordingConfig});\n            this.downloadBlob(blob);\n        }\n\n        this.setState({recording: true, startTime: this.getCurrentTime()});\n\n        document.getElementById('video').srcObject = this.stream;\n\n        this.timer = setInterval(() => this.setState({currentTime: this.getCurrentTime()}), 1000);\n    }\n\n    downloadBlob = blob => {\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        document.querySelector('.buttons').appendChild(a);\n        a.classList.add('button');\n        a.href = url\n        a.download = 'video.webm';\n        a.innerText = 'Save Recording';\n        // window.URL.revokeObjectURL(url);\n        // a.click();\n        // document.body.removeChild(a);\n    }\n\n    stopRecording = async () => {\n        if (this.stream === null) return;\n\n        clearInterval(this.timer);\n\n        this.recorder.stop();\n\n        this.stream.getTracks().forEach(track => track.stop());\n        this.stream = null;\n\n        document.getElementById('video').srcObject = null;\n        this.setState({recording: false, finished: true});\n    }\n\n    getRecordingTime = () => Math.max(0, this.state.currentTime - this.state.startTime);\n\n    render() {\n        if (!this.state.recording && !this.state.finished)\n            return (\n                <div className={'app'}>\n                    <div className={'buttons'}>\n                        <div className={'button'} onClick={() => this.startRecording()}>Start Recording</div>\n                    </div>\n                </div>\n            );\n\n        return (\n            <div className={'app'}>\n                <video id={'video'} autoPlay={true} muted={true}/>\n                {this.state.finished ?\n                    <div>RECORDING ENDED: Clip duration: {this.getRecordingTime()}s</div> :\n                    <div>RECORDING... {this.getRecordingTime()}s</div>}\n\n                <div className={'buttons'}>\n                    {!this.state.finished && <div className={'button'} onClick={() => this.stopRecording()}>Stop Recording</div>}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/style.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}