{"version":3,"sources":["components/Dropdown.js","components/StartPage.js","components/RecordingPage.js","App.js","index.js"],"names":["Dropdown","state","selectedIndex","open","options","componentDidMount","props","select","index","setState","className","onClick","this","icon","faAngleUp","faAngleDown","map","option","key","Component","startRecording","recordingSettings","setRecordingSettings","placeholder","value","width","onChange","e","target","height","frameRate","profile","getRecordingTime","stopRecording","finished","recordingProfile","id","autoPlay","muted","RECORDING_CONFIGS","App","recording","startTime","currentTime","chunks","stream","recorder","getCurrentTime","Math","floor","Date","now","getRecordingConfig","config","MediaRecorder","isTypeSupported","c","getValidatedRecordingSetting","isNaN","Number","undefined","getVideoTrackSettings","getVideoTracks","length","getSettings","a","navigator","mediaDevices","getDisplayMedia","video","audio","mimeType","start","ondataavailable","push","data","onstop","blob","Blob","loadDurationMetadata","URL","createObjectURL","duration","fixWebmDuration","fixedBlob","createDownloadButton","clearInterval","timer","getTracks","forEach","track","stop","document","getElementById","srcObject","setInterval","url","Promise","resolve","videoElement","src","onloadedmetadata","Infinity","ontimeupdate","createElement","querySelector","appendChild","classList","add","href","download","innerText","max","delta","RecordingPage","StartPage","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a626c32c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faAngleDown, faAngleUp} from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class Dropdown extends Component {\r\n    state = {\r\n        selectedIndex: 0,\r\n        open: false\r\n    }\r\n\r\n    options = [\r\n        'High Quality (VP9)',\r\n        'Medium Quality (H.264)'\r\n    ];\r\n\r\n    componentDidMount = () => this.props.select(this.options[0]);\r\n\r\n    select = index => {\r\n        this.setState({selectedIndex: index, open: false});\r\n        this.props.select(this.options[index]);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'dropdown'}>\r\n                <div className={'dropdown__selected'} onClick={() => this.setState({open: !this.state.open})}>\r\n                    <div>{this.options[this.state.selectedIndex]}</div>\r\n                    <FontAwesomeIcon icon={this.state.open ? faAngleUp : faAngleDown}/>\r\n                </div>\r\n                {this.state.open &&\r\n                <div className={'dropdown__options'}>\r\n                    {this.options.map((option, index) =>\r\n                        <div className={'dropdown__option'} key={index} onClick={() => this.select(index)}>{option}</div>)}\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Dropdown from \"./Dropdown\";\r\n\r\nexport default ({startRecording, recordingSettings, setRecordingSettings}) => (\r\n    <div className={'app'}>\r\n        <div className={'options'}>\r\n            <div className={'options__title'}>Options</div>\r\n\r\n            <div className={'input-field'}>\r\n                <div className={'input-field__name'}>Width</div>\r\n                <div className={'input-field__description'}>Determines the width of the resolution.</div>\r\n                <input className={'input-field__input'} placeholder={'native'} value={recordingSettings.width} onChange={e => setRecordingSettings({width: e.target.value})}/>\r\n            </div>\r\n\r\n            <div className={'input-field'}>\r\n                <div className={'input-field__name'}>Height</div>\r\n                <div className={'input-field__description'}>Determines the height of the resolution.</div>\r\n                <input className={'input-field__input'} placeholder={'native'} value={recordingSettings.height} onChange={e => setRecordingSettings({height: e.target.value})}/>\r\n            </div>\r\n\r\n            <div className={'input-field'}>\r\n                <div className={'input-field__name'}>FPS</div>\r\n                <div className={'input-field__description'}>Determines the FPS.</div>\r\n                <input className={'input-field__input'} placeholder={'native'} value={recordingSettings.frameRate} onChange={e => setRecordingSettings({frameRate: e.target.value})}/>\r\n            </div>\r\n\r\n            <div className={'dropdown-field'}>\r\n                <div className={'input-field__name'}>Video Encoding (Quality)</div>\r\n                <div className={'input-field__description'}>Determines the video encoding (compression) which affects the video quality.</div>\r\n                <Dropdown select={value => setRecordingSettings({profile: value})}/>\r\n            </div>\r\n\r\n            <hr/>\r\n        </div>\r\n\r\n        <div className={'buttons'}>\r\n            <div className={'button'} onClick={() => startRecording()}>Start Recording</div>\r\n        </div>\r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nexport default ({getRecordingTime, stopRecording, finished, recordingProfile, recordingSettings}) => (\r\n    <div className={'app'}>\r\n        <video id={'video'} autoPlay={true} muted={true}/>\r\n\r\n        <div className={'video-caption'}>\r\n            {!finished && <div>{recordingProfile} | {recordingSettings.frameRate} FPS | {recordingSettings.width}x{recordingSettings.height}</div>}\r\n            {!finished && <div>RECORDING... {getRecordingTime()}s</div>}\r\n\r\n            {finished && <div>RECORDING ENDED: Clip duration: {getRecordingTime()}s</div>}\r\n        </div>\r\n\r\n        <div className={'buttons'}>\r\n            {!finished && <div className={'button'} onClick={() => stopRecording()}>Stop Recording</div>}\r\n        </div>\r\n    </div>\r\n);\r\n\r\n","import React, {Component} from 'react';\nimport fixWebmDuration from 'fix-webm-duration';\n\nimport StartPage from './components/StartPage';\nimport RecordingPage from './components/RecordingPage';\n\nconst RECORDING_CONFIGS = {\n    high: 'video/webm; codecs=\"vp9, opus',\n    medium: 'video/webm; codecs=\"h264, opus',\n    fallbacks: [\n        'video/webm; codecs=\"vp8, opus\"',\n        'video/webm',\n    ]\n}\n\nexport default class App extends Component {\n    state = {\n        recording: false,\n        finished: false,\n        startTime: 0,\n        currentTime: 0,\n\n        recordingSettings: {\n            profile: '',\n            width: '',\n            height: '',\n            frameRate: ''\n        }\n    }\n\n    chunks = [];\n    stream = null;\n    recorder = null;\n\n    getCurrentTime = () => Math.floor(Date.now() / 1000);\n\n    getRecordingConfig = () => {\n        let config = '';\n\n        if (this.state.recordingSettings.profile === 'High Quality (VP9)')\n            config = RECORDING_CONFIGS.high;\n        else if (this.state.recordingSettings.profile === 'Medium Quality (H.264)')\n            config = RECORDING_CONFIGS.medium;\n\n        if (!MediaRecorder.isTypeSupported(config))\n            for (let c of RECORDING_CONFIGS.fallbacks)\n                if (MediaRecorder.isTypeSupported(c)) {\n                    config = c;\n                    break;\n                }\n\n        return config;\n    }\n\n    getValidatedRecordingSetting = value => (value === '' || isNaN(Number(value)) || Number(value) <= 0) ? undefined : Number(value);\n\n    getVideoTrackSettings = () => this.stream !== null && this.stream.getVideoTracks().length > 0 ? this.stream.getVideoTracks()[0].getSettings() : {};\n\n    startRecording = async () => {\n        const {width, height, frameRate} = this.state.recordingSettings;\n\n        this.stream = await navigator.mediaDevices.getDisplayMedia({\n            video: {\n                width: this.getValidatedRecordingSetting(width),\n                height: this.getValidatedRecordingSetting(height),\n                frameRate: this.getValidatedRecordingSetting(frameRate)\n            },\n            audio: true\n        });\n\n        this.recorder = new MediaRecorder(this.stream, {mimeType: this.getRecordingConfig()});\n        this.recorder.start();\n\n        this.recorder.ondataavailable = e => this.chunks.push(e.data);\n\n        this.recorder.onstop = async () => {\n            const blob = new Blob(this.chunks);\n\n            const duration = await this.loadDurationMetadata(URL.createObjectURL(blob)) * 1000;\n\n            fixWebmDuration(blob, duration, fixedBlob =>\n                this.createDownloadButton(URL.createObjectURL(fixedBlob))\n            );\n\n            clearInterval(this.timer);\n\n            if (this.stream !== null) {\n                this.stream.getTracks().forEach(track => track.stop());\n                this.stream = null;\n            }\n\n            this.setState({recording: false, finished: true});\n        }\n\n        this.setState({recording: true, startTime: this.getCurrentTime()});\n\n        document.getElementById('video').srcObject = this.stream;\n\n        this.timer = setInterval(() => this.setState({currentTime: this.getCurrentTime()}), 1000);\n    }\n\n    loadDurationMetadata = async url => new Promise(resolve => {\n        const videoElement = document.getElementById('video');\n        videoElement.srcObject = null;\n        videoElement.src = url;\n\n        videoElement.onloadedmetadata = () => {\n            if (videoElement.duration !== Infinity) return;\n\n            videoElement.currentTime = 1e101;\n            videoElement.ontimeupdate = () => {\n                resolve(videoElement.duration);\n\n                videoElement.currentTime = 0;\n                videoElement.src = null;\n            }\n        }\n    });\n\n    createDownloadButton = url => {\n        const a = document.createElement('a');\n        document.querySelector('.buttons').appendChild(a);\n        a.classList.add('button');\n        a.href = url\n        a.download = 'video.webm';\n        a.innerText = 'Save Recording';\n    }\n\n    stopRecording = async () => this.recorder.stop();\n\n    getRecordingTime = () => Math.max(0, this.state.currentTime - this.state.startTime);\n\n    setRecordingSettings = delta => this.setState({recordingSettings: ({...this.state.recordingSettings, ...delta})});\n\n    render() {\n        return (!this.state.recording && !this.state.finished) ?\n            <StartPage startRecording={() => this.startRecording()} recordingSettings={this.state.recordingSettings} setRecordingSettings={delta => this.setRecordingSettings(delta)}/> :\n            <RecordingPage\n                finished={this.state.finished}\n                recordingProfile={this.state.recordingSettings.profile}\n                recordingSettings={this.getVideoTrackSettings()}\n                getRecordingTime={() => this.getRecordingTime()}\n                stopRecording={() => this.stopRecording()}\n            />;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/style.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}